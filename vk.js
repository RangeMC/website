require("dotenv").config();
const luckperms = require("mysql2").createPool({
    host: process.env.MYSQL_HOST,
    port: process.env.MYSQL_PORT,
    user: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE_LUCKPERMS,
    insecureAuth: true,
    charset: "utf8mb4"
});

const account = require("mysql2").createPool({
    host: process.env.MYSQL_HOST,
    port: process.env.MYSQL_PORT,
    user: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE_ACCOUNTS,
    insecureAuth: true,
    charset: "utf8mb4"
});

const checkGroup = async (ctx, group, callback) => {
    let author = String(ctx.message.from_id || ctx.message.user_id);
    let user = await account.promise().query("SELECT * FROM accounts WHERE vk = ?", [author]);
    if(!user[0][0])
        return ctx.reply("üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞ –≤–∞—à ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
    
    let permLevels = {
        "default": 1,
        "helper": 2,
        "moder": 3,
        "stmoder": 4,
        "devel": 5,
        "admin": 6
    };

    let lpData = await luckperms.promise().query("SELECT * FROM luckperms_players WHERE username = ?", [user[0][0].login.toLowerCase()]);
    if(!lpData[0][0])
        return ctx.reply("üö´ –û –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤.");

    let userLevel = permLevels[lpData[0][0].primary_group];
    let requiredLevel = permLevels[group];
    if(userLevel < requiredLevel)
        return ctx.reply(`üö´ –£ –í–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥—Ä—É–ø–ø–∞ "${group}" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ${(lpData[0][0].primary_group) ? lpData[0][0].primary_group : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);

    return callback({ user, lpData });
};

const Nodeactyl = require('nodeactyl');
const instance = Nodeactyl.Client;

instance.login(process.env.PANEL_CLIENT, process.env.PANEL_CLIENT_KEY, (logged_in, msg) => {
    if(logged_in == false) console.error(`* –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${process.env.PANEL_CLIENT} | ${msg}`);
    else console.info(`* –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏`);
});

const VkBot = require("node-vk-bot-api");
const bot = new VkBot({
    token: process.env.VK_TOKEN,
    group_id: process.env.VK_GROUP_ID,
    execute_timeout: 50,
    polling_timeout: 25
});

bot.on((ctx) => {
    const messageContent = String(ctx.message.body || ctx.message.text);
    // const messageAuthorID = String(ctx.message.from_id || ctx.message.user_id);

    if(!messageContent.startsWith(process.env.PREFIX)) return;

	const args = messageContent.slice(process.env.PREFIX.length).split(/ +/);
    const command = args.shift().toLowerCase();
	
	if(command == "help") {
        return checkGroup(ctx, "helper", async ({ user, lpData }) => {
            let arr = [
                `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:`,
                `- info        <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç —Ö–µ–ª–ø–µ—Ä–∞`,
                `- skin        <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç —Ö–µ–ª–ø–µ—Ä–∞`,
                `- cloak       <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç —Ö–µ–ª–ø–µ—Ä–∞`,
                `- unreg       <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`,
                `- activate    <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`,
                `- deactivate  <–ª–æ–≥–∏–Ω>  |  –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`,
                ``,
                `<> - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã`,
                `[] - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã`,
                ``,
                `–í–∞—à –Ω–∏–∫–Ω–µ–π–º: ${user[0][0].login}`,
                `–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ${lpData[0][0].primary_group}`
            ];

            return ctx.reply(arr.join("\n"));
        });
    }

    if(command == "unreg") {
        return checkGroup(ctx, "admin", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: unreg <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM accounts WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");
                    else return account.query("DELETE FROM accounts WHERE login = ?", [login], (err) => {
                        if(err) {
                            console.error(err);
                            return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                        } else return ctx.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.");
                    });
                }
            });
        });
    }

    if(command == "activate") {
        return checkGroup(ctx, "admin", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: activate <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM accounts WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");
                    if(Number(res[0].blocked) == 0) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    else return account.query("UPDATE accounts SET blocked = ? WHERE login = ?", ["0", login], (err) => {
                        if(err) {
                            console.error(err);
                            return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                        } else return ctx.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    });
                }
            });
        });
    }

    if(command == "deactivate") {
        return checkGroup(ctx, "admin", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: deactivate <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM accounts WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");
                    if(Number(res[0].blocked) == 1) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    else return account.query("UPDATE accounts SET blocked = ? WHERE login = ?", ["1", login], (err) => {
                        if(err) {
                            console.error(err);
                            return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                        } else return ctx.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    });
                }
            });
        });
    }

    if(command == "info") {
        return checkGroup(ctx, "helper", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: info <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM accounts WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");

                    let arr = [
                        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ: ${res[0].login}`,
                        `VK: vk.com/id${res[0].vk}`,
                        ``,
                        `–ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`,
                        `- discord | ${res[0].discord}`,
                        `- blocked | ${res[0].blocked}`,
                        `- invited_by | ${res[0].invited_by}`,
                    ];

                    return ctx.reply(arr.join("\n"));
                }
            });
        });
    }

    if(command == "skin") {
        return checkGroup(ctx, "helper", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: skin <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM skins WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");
                    else {
                        let arr = [
                            `–°–∫–∏–Ω –∏–≥—Ä–æ–∫–∞ ${login}:`,
                            `- –•—ç—à                    | ${res[0].hash}`,
                            `- –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª  | https://rangemc.ovh/api/skins-folder/${res[0].hash}`
                        ];

                        return ctx.reply(arr.join("\n"));
                    }
                }
            });
        });
    }

    if(command == "cloak") {
        return checkGroup(ctx, "helper", async () => {
            let login = args[0];
            if(!login) return ctx.reply("üö´ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: cloak <–ª–æ–≥–∏–Ω>");
            else return account.query("SELECT * FROM cloaks WHERE login = ?", [login], (err, res) => {
                if(err) {
                    console.error(err);
                    return ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
                } else {
                    if(!res[0]) return ctx.reply("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.");
                    else {
                        let arr = [
                            `–ü–ª–∞—â –∏–≥—Ä–æ–∫–∞ ${login}:`,
                            `- –•—ç—à                    | ${res[0].hash}`,
                            `- –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª  | https://rangemc.ovh/api/cloaks-folder/${res[0].hash}`
                        ];

                        return ctx.reply(arr.join("\n"));
                    }
                }
            });
        });
    }
});

bot.startPolling().then(() => console.log("* RangeDevBot –∑–∞–ø—É—â–µ–Ω."));